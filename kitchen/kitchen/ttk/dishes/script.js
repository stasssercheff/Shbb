document.addEventListener("DOMContentLoaded", () => {
  console.log("‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω");

  // –ö–Ω–æ–ø–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ (accordion)
  const sections = document.querySelectorAll(".accordion");

  sections.forEach((btn) => {
    btn.addEventListener("click", async () => {
      const section = btn.dataset.section;
      console.log("üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞:", section);

      const panel = document.getElementById(section + "-section");
      if (!panel) {
        console.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω panel –¥–ª—è:", section);
        return;
      }

      // –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è
      if (panel.style.display === "block") {
        panel.style.display = "none";
        console.log("‚¨ÖÔ∏è –ü–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞:", section);
        return;
      }

      // —Å–ø—Ä—è—á–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π
      document.querySelectorAll(".panel").forEach((p) => (p.style.display = "none"));
      panel.style.display = "block";

      // –≥—Ä—É–∑–∏–º JSON
      try {
        const response = await fetch(`data/${section}.json?nocache=${Date.now()}`);
        console.log("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º:", `data/${section}.json`);

        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON (${response.status})`);
        }

        const data = await response.json();
        console.log("üì¶ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:", data);

        renderDishes(panel, data);
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–ø–∞—Ä—Å–∏–Ω–≥–µ JSON:", err);
        panel.innerHTML = `<p style="color:red;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${err.message}</p>`;
      }
    });
  });

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
  function renderDishes(panel, data) {
    console.log("üé® –†–∏—Å—É–µ–º –±–ª—é–¥–∞...");

    panel.innerHTML = ""; // –æ—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä–æ–µ

    data.forEach((dish, dishIndex) => {
      console.log(`üç≥ –ë–ª—é–¥–æ ${dishIndex + 1}:`, dish.name?.ru);

      // –∑–∞–≥–æ–ª–æ–≤–æ–∫
      const title = document.createElement("h3");
      title.textContent = dish.name?.ru || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
      panel.appendChild(title);

      // —Ç–∞–±–ª–∏—Ü–∞
      const table = document.createElement("table");
      table.classList.add("dish-table");

      const thead = document.createElement("thead");
      thead.innerHTML = `
        <tr>
          <th>‚Ññ</th>
          <th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞</th>
          <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
          <th>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è</th>
          <th>–§–æ—Ç–æ</th>
        </tr>`;
      table.appendChild(thead);

      const tbody = document.createElement("tbody");

      if (dish.ingredients && dish.ingredients.length > 0) {
        dish.ingredients.forEach((ing, i) => {
          const tr = document.createElement("tr");

          // –Ω–æ–º–µ—Ä
          const tdNum = document.createElement("td");
          tdNum.textContent = String(i + 1);
          tr.appendChild(tdNum);

          // –ø—Ä–æ–¥—É–∫—Ç
          const tdIng = document.createElement("td");
          tdIng.textContent = ing.ru || "";
          tr.appendChild(tdIng);

          // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
          const tdAmount = document.createElement("td");
          tdAmount.textContent = ing.amount || "";
          tr.appendChild(tdAmount);

          // —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∏ —Ñ–æ—Ç–æ ‚Äî –æ–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏
          if (i === 0) {
            const tdProcess = document.createElement("td");
            tdProcess.textContent = dish.process?.ru || "";
            tdProcess.rowSpan = dish.ingredients.length;
            tr.appendChild(tdProcess);

            const tdPhoto = document.createElement("td");
            if (dish.photo) {
              const img = document.createElement("img");
              img.src = dish.photo;
              img.alt = "–§–æ—Ç–æ";
              img.style.maxWidth = "120px";
              img.style.display = "block";
              tdPhoto.appendChild(img);
            } else {
              tdPhoto.textContent = "-";
            }
            tdPhoto.rowSpan = dish.ingredients.length;
            tr.appendChild(tdPhoto);
          }

          tbody.appendChild(tr);
        });
      }

      table.appendChild(tbody);
      panel.appendChild(table);
    });
  }
});